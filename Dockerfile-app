# Step 1: Use the official Node.js image to build and run the React app.
# This image contains the Node.js runtime and npm, which are required for
# installing dependencies and building the React app.
FROM node:18 AS builder

# Step 2: Set the working directory inside the container to /app.
# First, subsequent commands will be executed in this directory.
WORKDIR /app

# Step 3: Copy all project files from the host machine into the container's /app directory.
COPY . .

# Step 4: Install all the project dependencies listed in package.json.
RUN npm install

# Step 5: Build the React app by running 'npm run build'.
# This command will compile the React app files (HTML, CSS, JavaScript) in the /app/build directory.
# The build output is now ready to be served by a web server.
RUN npm run build

# Step 6: Use a lightweight web server (nginx) to serve the static files generated by the React build.
# Nginx is an efficient and fast web server for serving static content like HTML, CSS, and JavaScript.
# By using nginx, we start a new stage based on the Nginx image, which is optimized for serving static files.
# The Node.js environment is no longer needed, and is discarded in this stage.
FROM nginx:alpine

# Step 7: Copy only the built static files (from the /app/build directory) into the nginx serving directory (/usr/share/nginx/html).
# The nginx directory contains the bundled, optimized files that the React app needs in order to run.
# By using the COPY --from-builder, we only copy the final static assets
# and exclude the entire Node.js environment (which is unnecessary for serving static files).
# This significantly reduces the size of the final image by excluding Node.js and npm.
COPY --from=builder /app/build /usr/share/nginx/html

# Step 8: Expose port 80
EXPOSE 80

# Step 9: Run Nginx in the foreground to keep the container alive.
# By default, Nginx runs in the background (as a daemon), but Docker containers need the process to run in the foreground.
# The "daemon off;" command tells Nginx to run in the foreground, preventing it from exiting and allowing the container to stay active.
CMD ["nginx", "-g", "daemon off;"]